# This YAML file describes the context Compute Pods

# We start by giving a name to this federation of compute pods
federationName: playGround

# Now we specify the certificate key size... the larger you choose the more
# secure the communitcation will be... but it will take more time to
# generate
keySize: 4096

# We must specify details for the Certificate Authority
certificateAuthority:
  organization: An organization
  country: ACountry
  province: A province
  locality: A City
  commonName: aCommonName
  validFor:
    years: 10
    months: 0
    days: 0

# We now specify which machines will run a compute pod

# We can start by specifying the standard defaults for any compute pod
# interface.
#
# NOTE: any instance of "$HOME" in the "commons" path (below) will be
#       replaced by the environment variable "HOME" from the machine/user
#       which runs the create subcommand
#
podDefaults:
#   commons: /a/path/to/the/commons
#   hosts: # set in pod
#     - host:ip
#   ports: # set in pod (a *named* hash of port publish statements)
#     web: 0.0.0.0:8080:80
#   volumes: # set in container (all)
#     - /a/host/directory/path:/a/container/directory/path:ro
#   envs: # set in container (all)
#    aKey: aValue
#   shell: /bin/bash
#   secrets: # set in container (all)
#    - aSecretName # (see podman secret)
#   maxLoadPerCPU: .5 # a value honoured by the computePods system
# (see: https://stackoverflow.com/a/14840102
#   or: https://stackoverflow.com/a/55423170
#  and: https://www.geeksforgeeks.org/python-os-getloadavg-method/  )
  images:
    - context
#
#  baseImages:
#    - aBaseImageForSomeOtherImage
#
# Now we specify the compute pods host names as well as any non-standard
# ports....
#
# Any of the above pod defaults can be specified for a specific computePod
# and will override those defaults
#
# NOTE: The hosts names should be the name used by your (internal) network
#
# NOTE: If a given host has multiple names in your network, the host names
# can be a comma separated list of these names.
#
computePods:
  - host: machine01
  - host: machine02
  - host: machine03
  - host: machine04

# Now we provide a list of the individual user's names or email addresses.
users:
  - name: some.one@example.com

# Now we specify how to build what will be run on these machines
#
# buildDir: /a/path
#
# cekitRepositories:
#   - /a/path
#
cekitImageDescriptions:
  defaults:
    repositories:
      - ./cekitModules
  context:
    basedOn: python:slim
    packagesManager: apt-get
    description: A ConTeXt typesetting worker
    version: 1.0
    modules:
      - context

# Now we provide the (private) central OCI registry to use to push/pull
# images.
#
registry:
  host: aRegistryHostName
  port: 5000
#  path: a/path
  isSecure: false
#
# NOTE: with `isSecure: false` you can use a local registry which has no
# TLS/SSL certificates or authorized users. This option is useful if you
# run a *temporary* registry which is running only while you build images
# and/or create your pods. (Access to the registry is ONLY needed during
# these two times).
#
# ALTERNATIVELY you can run your own *secure* registry, for pdoman see the
# excellent tutorial:
#
#      https://www.redhat.com/sysadmin/simple-container-registry
#
